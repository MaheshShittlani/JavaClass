Collection Interface  Methods
---------------------------------
1. int size()
2. boolean isEmpty()
3. void clear()
------------------------------

Addition
--------------
    boolean add(E element)

Remove
------------------------
    boolean remove(Object)

Existance check
----------------------
    boolean contains(E Element)

Set Operation
-------------------------
    addAll(Collection) ->   A.addAll(B) -> A Union B
    removeAll(Collection) -> A.removeAll(B) ->   A - B
    retainAll(Collection) -> A.retainAll(B) -> A subset B
    containsAll(Collection) -> A.containsAll(B) -> A subset B
---------------------------------------------------------

equals() -> A.equals(B) -> A==B (deep compare)
--------------------------------------------------

Collection to Array
----------------------
T[] toArray();


Note: some of the Collection interface methods are not supported in Child class and throws
java.lang.UnsupportedOperationException that is the child of RuntimeException.

    public void someMethod() throws UnsupportedOperationException{
        throws new UnsupportedOperationException("Operation not suppoerted");
    }

------------------------------------------------------------------------
Java Collection framewroks support two types of containers
    1. Storing collection of elements simply called collection
    2. Storing data into key/value pair are called Maps.

Set -> stores a group of non duplicate elements
List -> stores an ordered collection of elements.
Stack -> stores object that are processed in LIFO order
Queue -> stores object that are processed in FIFO order
PriorityQueue-> Store object thar are process in the order of their priority.


List(I)
------------------------------
1. List extends Collection interface
2. List is the collection of objects access in insertion order and allows the duplicate elements.
3. Ordered -> Yes (Insertion Order)
4. Duplicate Allowed -> Yes
5. ArrayList(c) and LinkedList(c) are two implementaion of List interface.
6. List allows you to access the elements from index.
-----------------------------------------------

List Methods
--------------------
    E get(int index)
    set(int index, E)
    add(int index, E)
    addAll(int index, Collection)
    remove(index index)
    indexOf(E)
    lastIndexOf(E)
    subList(int startIndex, int endIndex)

    listIterator()
    listIterator(int startIndex)

------------------------------------------
    Iterator(I) -> UniDirectional
    -----------------------
        hasNext()
        next()
        remove() // Fail fast behavior- remove an index two time without moving to the next element throws and exception
    ListIterator(I) -> BiDirectional
    --------------------------
        hasNext()
        hasPrevious()
        next()
        previous()
        remove()

----------------------------------------

ArrayList(C)
--------------

1. ArrayList is the implementation of List interface
2. ArrayList -> Data Structure -> Growable Array
3. Ordered ? -> Yes -> Insertion Order
4. Index Accessiable -> Yes

Creating ArrayList constructors and Method
------------------------------
ArrayList
ArrayList(Collection)
ArrayList(int intialCapacity)
trimToSize() ->  Shorten the array list


LinkedList(C)
-------------------
1. LinkedList is the implementaion of List Interface
2. LinkedList -> Data Structure -> LinkedList
3. Ordered ? -> Yes -> Insertion Order
4. Index Accessiable -> Yes

LinkedList constructors and methods
-------------------------
1. LinkedList()
2. LinkedList(Collection)
3. void addFirst(E element)
4. void addLast(E element);
5. E removeFirst()
6. E removeLast()
7. E getFirst()
8. E getLast()

Note:
    List<String>colors =  Arrays.asList("red", "green", "blue")
-------------------------------------

Comparable & Comparator

Vector and Stack class (Legacy Classes)
-----------------------------
1. Vector is a subclass of AbstractList
2. Stack is a subclass of Vector
3. Redesined in Java-2 but support the older functionality for compatablity.

Vector V/S ArrayList
-----------------------
1. Vector and ArrayList are Same, except that Vector methods are synchronized (thread safe).
2. Vector class is a Legacy class which is created before the collection framework and Redesined
in collection framework.
3. In Java-2, Vector is redesigned in such a way that it follows the consistant nature 
of other classes and implement the common interfaces.


Vector Constructor & Methods
------------------------------
Vector()
Vector(Collection)
Vector(int intialCapacity)
Vector(int intialCapacity, int capacityIncrement)

void addElement(E)
int capacity()
Enumeration elements()
E elementAt(int index)
E firstElement()
E lastElement()
void insertElementAt(int index, Object o)
boolean removeAllElements()
boolean removeElement(Object )
boolean removeElementAt(int index)
void setElementAt(int index, Object)
void setSize(int size)
void trimToSize()

Note: Enumeration is same as Iterator that is induced before Java-2 and suppersed by Iterator
in Java-2.

Enumeration
-----------------
boolean hasMoreElements()
E nextElement()

Stack class
-----------------
Stack()
boolean empty()
E peek()
E pop()
E push(E)
int search(E)

-----------------------------------
Queue & Priority Queue
-----------------------------------

In a priority Queue, the element with highest priority is removed first.

Queue(I)
----------
add(E) -> 
boolean offer(E) - Adds a new element

E poll()  
E remove() 

Note: poll() and remove methods are Same but poll return null when queue is empty
remove throws the exception.

E peek() 
E element()

Note: peek() and element methods are Same but peek return null when queue is empty
element throws the exception.


Deque(I)
----------
0. Deque -> Double Ended Queue
1. Deque(I) extends the queue interface
2. LinkedList(I) class implements the Deque(I), as Queue can be maintained by LinkedList also.
3. addFirst(), addLast(), removeFirst(), removeLast(), getFirst(), getLast()

Example of Implement queue using LinkedList

Static Methods for Lists and Collections
------------------------------------------------
The Collections class contains static methods to perform operations in collection and a list.
Collections class contains various static methods for searching, sorting, shuffling, copy, fill,

1. void sort(List)
2. void sort(List, Comparator)
3. int binarySerach(List, Object searchTerm)
4. int binarySerach(List, Object searchTerm, Comparator)
5. void reverse(List)
6. Comparator reverseOrder()
7. void shuffle(List)
8. void shuffle(List, Random)
9. void copy(List dest, List src)
10. List nCopies(int n, Object o)
11. Object max(Collection)
12. Object max(Collection, Comparator)
13. Object min(Collection)
14. Object min(Collection, Comparator)
15. boolean disjoint(Collection c1, Collection c2)
16. int frequency(Collection c, Object o)

----------------------------------

Set(I)
------------
1. Set is the chile of Collection(I)
2. Set represent unique collection of data. If any duplicate element trying to add using add()
method it don't add into the collection and return false.
3. Set(I) Implementation
    1. HashSet(C)
    2. LinkedHashSet(C)
    3. TreeSet(C)

HashSet(C) class
---------------------
Collection(I) -> AbstractSet(AC) -> HashSet(C) 
1. Store a unique collection of data.
2. Background Datastructure -> Hash Table(Hashing Technique) -> Growable Array implementation
3. Use the hashcode for hashing technique
4. HashSet is an underorderd collection.
5. Two elements are considered duplicate if e1.equals(e2) and e1.hashCode() == e2.hashCode()

Constructors
----------------
HashSet()
HashSet(int intialCapacity)
HashSet(Collection c)
HashSet(int intialCapacity, float loadFactor) // default 16,0.75


LinkedHashSet(C)

--------------------
Collection(I) -> AbstractSet(AC) -> HashSet(C) -> LinkedHashSet(C)

1. Child class of Set(C) class
2. Don't allow duplicate elements
3. Order -> Insertion Order
4. Data Strurcture -> LinkedList used with hashing technique
5. For hashing purpose, object hashcode() is used.

LinkedHashSet()
LinkedHashSet(Collection C)
LinkedHashSet(int initialCapacity)
LinkedHashSet(int intialCapacity, float loadFactor)



SortedSet(I)
-------------------
Collection(I) -> Set(I) -> SortedSet(I)
---------------------------
E first()
E last()
SortedSet<E> headSet(E)
SortedSet<E> tailSet(E)


NavigableSet(I)
--------------------
Collection(I) -> Set(I) -> SortedSet(I) -> NavigableSet(I)

E pollFirst()
E pollLast()
E lower(E e)
E higher(E e)
E floor(E)
E ceiling(E)


TreeSet
-------------
Collection(I)->Set(I)->SortedSet(I)->NavigableSet(I)->TreeSet(C)
1. TreeSet extends AbstractSet

TreeSet()
TreeSet(Collection c)
TreeSet(Comparactor)
TreeSet(SortedSet<E>)

Program to count the keywords in a file

Map
------------------
    Map is a container object that stores a collection of key/value pair.
        The keys are like indexes.
    Map can't contains duplicate keys.
    3 Implementaion
    ----------------
        1. HashMap
        2. LinkedHashMap
        3. TreeMap

Map Interfaces
----------------
    Map(I) -> SortedMap(I)    -> NavigableMap(I)
    Map(I) -> AbstractMap(AC)


Map methods
---------
    clear()
    containsKey(E)
    containsValue(E)
    Set<Map.Entry<K,V>> entrySet()
    V get(K key)
    boolean isEmpty()
    Set<K> keySet()
    V put(K key, V value)
    void putAll(Map<? extend K, ? extends V> m)
    V remove(K key)
    int size()
    Collection<V> values()
    void forEach(Consumer<? super K,? super V> action)

Query Methods
-----------------
boolean containsKey()
boolean containsValue()


Map.Entry(I)
    K getKey()
    V getValue()
    void setValue(V v)


HashMap
--------------
    Map(I) -> AbstractMap(AC) -> HashMap(C)

HashMap()
HashMap(int intialCapacity, float loadFactor) // 16, 0.75
HashMap(Map<? extends K, ? extends V> m)

1. Order -> Unordered
2. Duplicate Key -> Not allowed
3. Duplication value -> Allowed
4. How to identify a key is duplicate or not -> 
    1. obj1.key == obj2.key
    2. obj1.key.hashCode().equals(obj2.key.hashCode());
5. Background Data Structur -> HashTable using growable array and implements like HashSet
6. Need to override hashCode() and equals() method for user defined object.

LinkedHashMap
-----------------
    Map(I) -> AbstractMap(AC) -> HashMap(C) -> LinkedHashMap(C)

LinkedHashMap()
LinkedHashMap(Map<? extends K, ? extends V> m)
LinkeHashMap(int intialCapacity, float loadFactor, boolean accessOrder)

1. Ordered -> Yes (Insertion Order by Key)
2. Duplicate key Allowed -> No.
3. Background Datastructure -> LinkedList


SortedMap
-------------------
Map(I) -> SortedMap(I)

K firstKey()
V firstValue()
Comparator<? super K> comparactor() 
SortedMap<K,V> headMap(K toKey)
SortedMap<K,V> tailMap(K toKey)

1. Efficient in insertion, deletion and searching
2. Not Ordered

NavigableMap(I)
--------------
Map(I) -> SortedMap(I) -> NavigableMap(I)

K floorKey(K key)
K ceilinkKey(K key)
K lowerKey(K key)
K higherKey(K key)
Map.Entry<K,V> pollFirstEntry()
Map.Entry<K,V> pollLastEntry()


TreeMap(C)
-------------------
Map(I) -> SortedMap(I) -> NavigableMap(I) -> TreeMap(C)

1. TreeMap()
2. TreeMap(Map<? extends K, ? extends V> m)
3. TreeMap(Comparator <? super K> c)